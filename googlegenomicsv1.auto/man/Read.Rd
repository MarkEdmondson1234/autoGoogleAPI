% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genomics_objects.R
\name{Read}
\alias{Read}
\title{Read Object}
\usage{
Read(Read.info = NULL, fragmentName = NULL, readGroupSetId = NULL,
  duplicateFragment = NULL, readNumber = NULL, readGroupId = NULL,
  alignedSequence = NULL, info = NULL, nextMatePosition = NULL,
  supplementaryAlignment = NULL, properPlacement = NULL,
  fragmentLength = NULL, failedVendorQualityChecks = NULL,
  alignedQuality = NULL, alignment = NULL, numberReads = NULL,
  id = NULL, secondaryAlignment = NULL)
}
\arguments{
\item{Read.info}{The \link{Read.info} object or list of objects}

\item{fragmentName}{The fragment name}

\item{readGroupSetId}{The ID of the read group set this read belongs to}

\item{duplicateFragment}{The fragment is a PCR or optical duplicate (SAM flag 0x400)}

\item{readNumber}{The read number in sequencing}

\item{readGroupId}{The ID of the read group this read belongs to}

\item{alignedSequence}{The bases of the read sequence contained in this alignment record,}

\item{info}{A map of additional read alignment information}

\item{nextMatePosition}{The mapping of the primary alignment of the}

\item{supplementaryAlignment}{Whether this alignment is supplementary}

\item{properPlacement}{The orientation and the distance between reads from the fragment are}

\item{fragmentLength}{The observed length of the fragment, equivalent to TLEN in SAM}

\item{failedVendorQualityChecks}{Whether this read did not pass filters, such as platform or vendor quality}

\item{alignedQuality}{The quality of the read sequence contained in this alignment record}

\item{alignment}{The linear alignment for this alignment record}

\item{numberReads}{The number of reads in the fragment (extension to SAM flag 0x1)}

\item{id}{The server-generated read ID, unique across all reads}

\item{secondaryAlignment}{Whether this alignment is secondary}
}
\value{
Read object
}
\description{
Read Object
}
\details{
Autogenerated via \code{\link[googleAuthR]{gar_create_api_objects}}
A read alignment describes a linear alignment of a string of DNA to areference sequence, in addition to metadataabout the fragment (the molecule of DNA sequenced) and the read (the baseswhich were read by the sequencer). A read is equivalent to a line in a SAMfile. A read belongs to exactly one read group and exactly oneread group set.For more genomics resource definitions, see [Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)### Reverse-stranded readsMapped reads (reads having a non-null `alignment`) can be aligned to eitherthe forward or the reverse strand of their associated reference. Strandednessof a mapped read is encoded by `alignment.position.reverseStrand`.If we consider the reference to be a forward-stranded coordinate space of`[0, reference.length)` with `0` as the left-most position and`reference.length` as the right-most position, reads are always aligned leftto right. That is, `alignment.position.position` always refers to theleft-most reference coordinate and `alignment.cigar` describes the alignmentof this read to the reference from left to right. All per-base fields such as`alignedSequence` and `alignedQuality` share this same left-to-rightorientation; this is true of reads which are aligned to either strand. Forreverse-stranded reads, this means that `alignedSequence` is the reversecomplement of the bases that were originally reported by the sequencingmachine.### Generating a reference-aligned sequence stringWhen interacting with mapped reads, it's often useful to produce a stringrepresenting the local alignment of the read to reference. The followingpseudocode demonstrates one way of doing this:    out = ''    offset = 0    for c in read.alignment.cigar {      switch c.operation {      case 'ALIGNMENT_MATCH', 'SEQUENCE_MATCH', 'SEQUENCE_MISMATCH':        out += read.alignedSequence[offset:offset+c.operationLength]        offset += c.operationLength        break      case 'CLIP_SOFT', 'INSERT':        offset += c.operationLength        break      case 'PAD':        out += repeat('*', c.operationLength)        break      case 'DELETE':        out += repeat('-', c.operationLength)        break      case 'SKIP':        out += repeat(' ', c.operationLength)        break      case 'CLIP_HARD':        break      }    }    return out### Converting to SAM's CIGAR stringThe following pseudocode generates a SAM CIGAR string from the`cigar` field. Note that this is a lossy conversion(`cigar.referenceSequence` is lost).    cigarMap = {      'ALIGNMENT_MATCH': 'M',      'INSERT': 'I',      'DELETE': 'D',      'SKIP': 'N',      'CLIP_SOFT': 'S',      'CLIP_HARD': 'H',      'PAD': 'P',      'SEQUENCE_MATCH': '=',      'SEQUENCE_MISMATCH': 'X',    }    cigarStr = ''    for c in read.alignment.cigar {      cigarStr += c.operationLength + cigarMap[c.operation]    }    return cigarStr
}
\seealso{
Other Read functions: \code{\link{Read.info}}
}
